package model;

import java.sql.Time;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.TimeUnit;

public class TimeSheet {
	private String employeeName;
	private int timeSheetId;
	private int employeeId;
	private Date shiftStartDate;
	private Date shiftEndDate;
	private Time shiftStartTime;
	private Time shiftEndTime;
	private long hoursWorked;
	private String overtimeComment;

	// create a new time sheet, doesnt have the ID, will be created by sqlite
	public TimeSheet(String employeeName, int employeeId, Date shiftStartDate, Date shiftEndDate, Time shiftStartTime,
			Time shiftEndTime) {
		this.employeeName = employeeName;
		this.employeeId = employeeId;
		this.shiftStartDate = shiftStartDate;
		this.shiftEndDate = shiftEndDate;
		this.shiftStartTime = shiftStartTime;
		this.shiftEndTime = shiftEndTime;
		this.timeSheetId = -1;
		this.hoursWorked = calculateHoursWorked();
	}

	// create TimeSheet object from db w/ autogenerated timeSheetId
	public TimeSheet(int timeSheetID, int employeeId, String employeeName, Date shiftStartDate, Date shiftEndDate,
			Time shiftStartTime, Time shiftEndTime, long hoursWorked) {
		this.timeSheetId = timeSheetID;
		this.employeeId = employeeId;
		this.employeeName = employeeName;
		this.shiftStartDate = shiftStartDate;
		this.shiftEndDate = shiftEndDate;
		this.shiftStartTime = shiftStartTime;
		this.shiftEndTime = shiftEndTime;
		this.hoursWorked = hoursWorked ;
	}

	// create a new time sheet with overtimeComment
	public TimeSheet(String employeeName, int employeeId, Date shiftStartDate, Date shiftEndDate, Time shiftStartTime,
			Time shiftEndTime, String overtimeComment) {
		this.employeeName = employeeName;
		this.employeeId = employeeId;
		this.shiftStartDate = shiftStartDate;
		this.shiftEndDate = shiftEndDate;
		this.shiftStartTime = shiftStartTime;
		this.shiftEndTime = shiftEndTime;
		this.overtimeComment = overtimeComment;
		this.timeSheetId = -1;
		this.hoursWorked = calculateHoursWorked();

	}

	// create a new time sheet from DB w/ overtimeComment
	public TimeSheet(int timeSheetID, int employeeId, String employeeName, Date shiftStartDate, Date shiftEndDate,
			Time shiftStartTime, Time shiftEndTime, String overtimeComment, long hoursWorked) {
		this.timeSheetId = timeSheetID;
		this.employeeId = employeeId;
		this.employeeName = employeeName;
		this.shiftStartDate = shiftStartDate;
		this.shiftEndDate = shiftEndDate;
		this.shiftStartTime = shiftStartTime;
		this.shiftEndTime = shiftEndTime;
		this.overtimeComment = overtimeComment;
		this.hoursWorked = hoursWorked;
	}

	public String getEmployeeName() {
		return this.employeeName;
	}

	public int getEmployeeId() {
		return this.employeeId;
	}

	public Date getShiftStartDate() {
		return this.shiftStartDate;
	}

	public Date getShiftEndDate() {
		return this.shiftEndDate;
	}

	public Date getShiftStartTime() {
		return this.shiftStartTime;
	}

	public Date getShiftEndTime() {
		return this.shiftEndTime;
	}

	public void setShiftStartDate(Date shiftStartDate) {
		if (this.shiftStartDate != null) {
			this.shiftStartDate = shiftStartDate;
		}
	}

	public void setShiftEndDate(Date shiftEndDate) {
		if (this.shiftEndDate != null)
			this.shiftEndDate = shiftEndDate;
	}

	public void setShiftStartTime(Time shiftStartTime) {
		if (this.shiftStartTime != null)
			this.shiftStartTime = shiftStartTime;
	}

	public void setShiftEndTime(Time shiftEndTime) {
		if (this.shiftEndTime != null)
			this.shiftEndTime = shiftEndTime;
	}

	public long getHoursWorked() {
		return this.hoursWorked;
	}

	public long calculateHoursWorked() {
	    // Combine shiftStartDate and shiftStartTime
	    Calendar startCalendar = Calendar.getInstance();
	    startCalendar.setTime(shiftStartDate);
	    Calendar startTimeCalendar = Calendar.getInstance();
	    startTimeCalendar.setTime(shiftStartTime);
	    startCalendar.set(Calendar.HOUR_OF_DAY, startTimeCalendar.get(Calendar.HOUR_OF_DAY));
	    startCalendar.set(Calendar.MINUTE, startTimeCalendar.get(Calendar.MINUTE));
	    startCalendar.set(Calendar.SECOND, startTimeCalendar.get(Calendar.SECOND));

	    // Combine shiftEndDate and shiftEndTime
	    Calendar endCalendar = Calendar.getInstance();
	    endCalendar.setTime(shiftEndDate);
	    Calendar endTimeCalendar = Calendar.getInstance();
	    endTimeCalendar.setTime(shiftEndTime);
	    endCalendar.set(Calendar.HOUR_OF_DAY, endTimeCalendar.get(Calendar.HOUR_OF_DAY));
	    endCalendar.set(Calendar.MINUTE, endTimeCalendar.get(Calendar.MINUTE));
	    endCalendar.set(Calendar.SECOND, endTimeCalendar.get(Calendar.SECOND));

	    // Calculate the duration in milliseconds
	    long durationInMillis = endCalendar.getTimeInMillis() - startCalendar.getTimeInMillis();
	    return TimeUnit.MILLISECONDS.toHours(durationInMillis);
	}


	public String getOvertimeComment() {
		return this.overtimeComment;
	}

	public void setOvertimeComment(String overtimeComment) {
		this.overtimeComment = overtimeComment;
	}
	
	@Override
	public String toString() {
	    return "TimeSheet{" +
	            "employeeName='" + employeeName + '\'' +
	            ", timeSheetId=" + timeSheetId +
	            ", employeeId=" + employeeId +
	            ", shiftStartDate=" + shiftStartDate +
	            ", shiftEndDate=" + shiftEndDate +
	            ", shiftStartTime=" + shiftStartTime +
	            ", shiftEndTime=" + shiftEndTime +
	            ", hoursWorked=" + hoursWorked +
	            ", overtimeComment='" + overtimeComment + '\'' +
	            '}';
	}

}
