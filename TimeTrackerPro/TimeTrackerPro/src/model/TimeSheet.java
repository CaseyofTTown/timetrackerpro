package model;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.Date;

public class TimeSheet {
	private String employeeName;
	private int timeSheetId;
	private int employeeId;
	private Date shiftStartDate;
	private Date shiftEndDate;
	private LocalTime shiftStartTime;
	private LocalTime shiftEndTime;
	private long hoursWorked;
	private String overtimeComment;

	// create a new time sheet, doesnt have the ID, will be created by sqlite
	public TimeSheet(String employeeName, int employeeId, Date shiftStartDate, Date shiftEndDate, LocalTime shiftStartTime,
			LocalTime shiftEndTime) {
		this.employeeName = employeeName;
		this.employeeId = employeeId;
		this.shiftStartDate = shiftStartDate;
		this.shiftEndDate = shiftEndDate;
		this.shiftStartTime = shiftStartTime;
		this.shiftEndTime = shiftEndTime;
		this.timeSheetId = -1;
		this.hoursWorked = calculateTimeWorked();
	}

	// create TimeSheet object from db w/ autogenerated timeSheetId
	public TimeSheet(int timeSheetID, int employeeId, String employeeName, Date shiftStartDate, Date shiftEndDate,
			LocalTime shiftStartTime, LocalTime shiftEndTime, long hoursWorked) {
		this.timeSheetId = timeSheetID;
		this.employeeId = employeeId;
		this.employeeName = employeeName;
		this.shiftStartDate = shiftStartDate;
		this.shiftEndDate = shiftEndDate;
		this.shiftStartTime = shiftStartTime;
		this.shiftEndTime = shiftEndTime;
		this.hoursWorked = hoursWorked ;
	}

	// create a new time sheet with overtimeComment
	public TimeSheet(String employeeName, int employeeId, Date shiftStartDate, Date shiftEndDate, LocalTime shiftStartTime,
			LocalTime shiftEndTime, String overtimeComment) {
		this.employeeName = employeeName;
		this.employeeId = employeeId;
		this.shiftStartDate = shiftStartDate;
		this.shiftEndDate = shiftEndDate;
		this.shiftStartTime = shiftStartTime;
		this.shiftEndTime = shiftEndTime;
		this.overtimeComment = overtimeComment;
		this.timeSheetId = -1;
		this.hoursWorked = calculateTimeWorked();

	}

	// create a new time sheet from DB w/ overtimeComment
	public TimeSheet(int timeSheetID, int employeeId, String employeeName, Date shiftStartDate, Date shiftEndDate,
			LocalTime shiftStartTime, LocalTime shiftEndTime, String overtimeComment, long hoursWorked) {
		this.timeSheetId = timeSheetID;
		this.employeeId = employeeId;
		this.employeeName = employeeName;
		this.shiftStartDate = shiftStartDate;
		this.shiftEndDate = shiftEndDate;
		this.shiftStartTime = shiftStartTime;
		this.shiftEndTime = shiftEndTime;
		this.overtimeComment = overtimeComment;
		this.hoursWorked = hoursWorked;
	}

	public String getEmployeeName() {
		return this.employeeName;
	}

	public int getEmployeeId() {
		return this.employeeId;
	}

	public Date getShiftStartDate() {
		return this.shiftStartDate;
	}

	public Date getShiftEndDate() {
		return this.shiftEndDate;
	}

	public LocalTime getShiftStartTime() {
		return this.shiftStartTime;
	}

	public LocalTime getShiftEndTime() {
		return this.shiftEndTime;
	}

	public void setShiftStartDate(Date shiftStartDate) {
		if (this.shiftStartDate != null) {
			this.shiftStartDate = shiftStartDate;
		}
	}

	public void setShiftEndDate(Date shiftEndDate) {
		if (this.shiftEndDate != null)
			this.shiftEndDate = shiftEndDate;
	}

	public void setShiftStartTime(LocalTime shiftStartTime) {
		if (this.shiftStartTime != null)
			this.shiftStartTime = shiftStartTime;
	}

	public void setShiftEndTime(LocalTime shiftEndTime) {
		if (this.shiftEndTime != null)
			this.shiftEndTime = shiftEndTime;
	}

	public long getHoursWorked() {
		return this.hoursWorked;
	}

	 public long calculateTimeWorked() {
		  if (shiftStartDate == null || shiftEndDate == null || shiftStartTime == null || shiftEndTime == null) {
		        throw new IllegalArgumentException("Shift start date, end date, start time, and end time must not be null");
		    }

		    // Combine shiftStartDate and shiftStartTime
		    LocalDateTime startDateTime = LocalDateTime.ofInstant(shiftStartDate.toInstant(), ZoneId.systemDefault())
		            .withHour(shiftStartTime.getHour())
		            .withMinute(shiftStartTime.getMinute());

		    // Combine shiftEndDate and shiftEndTime
		    LocalDateTime endDateTime = LocalDateTime.ofInstant(shiftEndDate.toInstant(), ZoneId.systemDefault())
		            .withHour(shiftEndTime.getHour())
		            .withMinute(shiftEndTime.getMinute());

		    // Calculate the duration in minutes
		    long durationInMinutes = java.time.Duration.between(startDateTime, endDateTime).toMinutes();
		    if (durationInMinutes < 0) {
		        throw new IllegalArgumentException("Shift end time must be after shift start time");
		    }

		    return durationInMinutes;
		}

		public String getFormattedHoursWorked() {
		    long totalMinutesWorked = calculateTimeWorked();
		    long hours = totalMinutesWorked / 60;
		    long minutes = totalMinutesWorked % 60;
		    return String.format("%d hours %d minutes", hours, minutes);
		}


	public String getOvertimeComment() {
		return this.overtimeComment;
	}
	public int getTimeSheetId() {
		return this.timeSheetId;
	}
	public void setTimeSheetId(int timeSheetId) {
        this.timeSheetId = timeSheetId;
    }

	public void setOvertimeComment(String overtimeComment) {
		this.overtimeComment = overtimeComment;
	}
	
	@Override
	public String toString() {
	    return "TimeSheet{" +
	            "employeeName='" + employeeName + '\'' +
	            ", timeSheetId=" + timeSheetId +
	            ", employeeId=" + employeeId +
	            ", shiftStartDate=" + shiftStartDate +
	            ", shiftEndDate=" + shiftEndDate +
	            ", shiftStartTime=" + shiftStartTime +
	            ", shiftEndTime=" + shiftEndTime +
	            ", hoursWorked=" + hoursWorked +
	            ", overtimeComment='" + overtimeComment + '\'' +
	            '}';
	}

}
